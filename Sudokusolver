//Processing 2.1
//Sodukosolver --- work very much in progress
int x;
int y;
int logFile;

int startSheet[][] = {
  {
    0, 0, 1, 0, 2, 0, 0, 3, 5
  }
  , 
  {
    0, 7, 0, 0, 9, 5, 2, 0, 8
  }
  , 
  {
    0, 2, 8, 7, 0, 3, 0, 0, 1
  }
  , 
  {
    7, 0, 6, 0, 4, 0, 0, 5, 9
  }
  , 
  {
    4, 8, 0, 5, 0, 9, 6, 0, 0
  }
  , 
  {
    0, 5, 0, 3, 7, 0, 8, 2, 0
  }
  , 
  {
    2, 4, 7, 0, 0, 1, 0, 0, 6
  }
  , 
  {
    0, 0, 0, 6, 3, 7, 9, 4, 0
  }
  , 
  {
    6, 0, 3, 2, 0, 0, 5, 1, 0
  }
};


PFont f;
IntList inventory;
IntList pencilmark;
void setup() {
  size(600, 300);
  f = createFont("Areal", 12, true);
}
void draw() {
  background(200);
  //drawStartSheet();
  //drawSolutionSheet();
  //checkPoss();
  highlight();
  runthrough();
  
}
void drawStartSheet() {
  textFont(f, 12);
  fill(0);
  int a = 20;
  int b = 20;
  for (int j = 0; j < 9; j = j+1) {
    for (int i = 0; i < 9; i = i+1) {
      text(startSheet[i][j], a, b);
      b = b + 20;
    }
    a = a +20;
    b = 20;
  }
}
void drawSolutionSheet() {
  line(350, 10, 350, 190);
  line(410, 10, 410, 190);
  line(300, 125, 470, 125);
  line(300, 65, 470, 65);
  textFont(f, 12);
  fill(0);
  int a = 300;
  int b = 20;
  for (int j = 0; j < 9; j = j+1) {
    for (int i = 0; i < 9; i = i+1) {
      if (startSheet[i][j] != 0) {
        text(startSheet[i][j], a, b);
      }
      b = b + 20;
    }
    a = a +20;
    b = 20;
  }
}
void checkPoss() {
  inventory = new IntList();
  pencilmark = new IntList();
  for (int i = 0; i < 9; i = i+1) { //for løkke viser hvilke verdier som er i x og y aksen
    inventory.append(startSheet[x][i]);
    inventory.append(startSheet[i][y]);
  }
  for (int i = floor(y/3)*3; i < floor(y/3)*3 + 3 ; i = i+1) { //for løkke viser hvilke verdier som er i "ruta"
    for (int j = floor(x/3)*3; j < floor(x/3)*3 + 3 ; j = j+1) {
      inventory.append(startSheet[i][j]);
    }
  }
  inventory.sort();
  for (int n = 0; inventory.get(0) == 0; n = 0) { //removes "0" values
    inventory.remove(0);
  }
  //println("Inventory: " + inventory);
  for (int n = 1; n < inventory.size(); n = n +1) { //removes duplicates
    if (inventory.get(n) == inventory.get(n-1)) {
      inventory.remove(n);
      n = n-1;
    }
  }
  for (int n = 1; n < 10; n = n + 1) { // should create a pencilmark list if bloody thing could work....
    if (inventory.hasValue(n) == false) {
      pencilmark.append(n);
    }
  }
  //println("Inventory: " + inventory);
  //println("Pencilmark: " + pencilmark);
  
  if (pencilmark.size() == 1){                // Fills in pencilmark to startSheet
   startSheet[x][y] = pencilmark.get(0); 
    String logFile = "X: "+ x + " Y: " + y + " Solution: " + pencilmark.get(0);
    println(logFile);
  }
  
}
void highlight() { //draws a marker on where the mousepointer is
  if (mouseX >= 300 && mouseX <= 470 && mouseY >=20 && mouseY <=185) {
    noStroke();
    fill(255, 150);
    rect(300, mouseY-5, 170, 10);
    rect(mouseX-5, 20, 10, 165);
    rect(mouseX-10, mouseY-10, 20, 20);
    x = (mouseX-300)/(160/8); //determines which cell the mouse hovers over. (165 is the hight of the sheet, 9 is the number of cells)
    y = (mouseY-20)/(160/8);
//    println(mouseX+ " " + mouseY + " X: " + x + " Y: " + y);
    stroke(0);
    fill(0);
  }
}


void runthrough(){
 for (x = 0; x < 9; x = x +1){
  for (y = 0; y < 9; y = y +1){
    if (startSheet[x][y] == 0){
    //println("runthrough x: " + x + " y: " + y);
    checkPoss();
    background(255);
    drawStartSheet();
    drawSolutionSheet();
  }}}
  
}
